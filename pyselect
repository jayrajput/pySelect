#!/usr/bin/python

# pyselect
# @author Jay Rajput. 
# @email  jayrajput@gmail.com
# @See    http://www.nicosphere.net/selectable-list-with-urwid-for-python-2542/
# @See    http://manpages.ubuntu.com/manpages/lucid/man1/iselect.1.html

# python curses library. @See http://excess.org/urwid/
import urwid
# Needed for command line parsing.
import argparse

class ItemWidget (urwid.WidgetWrap):
    def __init__ (self, id, description):
        self.id = id
        self.content = '%s' % (description[0:])
        self.item = [
            ('fixed', 15, urwid.Padding(urwid.AttrWrap(
                urwid.Text('item %s' % str(id)), 'body', 'focus'), left=2)),
            urwid.AttrWrap(urwid.Text('%s' % description), 'body', 'focus'),
        ]
        w = urwid.Columns(self.item)
        self.__super.__init__(w)

    def selectable (self):
        return True

    def keypress(self, size, key):
        return key

def main ():
    ######################
    # Command line parsing
    ######################
    def parseCmdLineArgs():
        parser = argparse.ArgumentParser(
                description='Interactive selection of ASCII lines using python similar to iselect'
        )
        parser.add_argument(
            "-f", "--file",
            required=True,
            help='File to write the user selection.',
            dest='file'
        )
        parser.add_argument(
            "-l", "--lines",
            required=True,
            nargs='*',
            help='Lines to be displayed interactively to the user',
            dest='inLines',
            metavar='line' 
        )
        return parser.parse_args()

    args = parseCmdLineArgs()

    # coloring scheme.
    palette = [
        ('body','dark cyan', '', 'standout'),
        ('focus','dark red', '', 'standout'),
        ('head','light red', 'black'),
        ]

    # key strokes
    def keystroke (input):
        if input in ('q', 'Q', 'enter'):
            raise urwid.ExitMainLoop()

        if input is 'enter':
            fh = open(args.file, "w")
            fh.write(listbox.get_focus()[0].content)
            fh.close()
            raise urwid.ExitMainLoop()

    items = []
    for i, line in enumerate(args.inLines):
        items.append(ItemWidget(i, str(line)))

    header = urwid.AttrMap(urwid.Text("Press ENTER to select an item. Use UP / DOWN / PAGE UP / PAGE DOWN for movement. q exits."), 'head')
    listbox = urwid.ListBox(urwid.SimpleListWalker(items))
    view = urwid.Frame(urwid.AttrWrap(listbox, 'body'), header=header)
    loop = urwid.MainLoop(view, palette, unhandled_input=keystroke)
    loop.run()

if __name__ == '__main__':
    main()
